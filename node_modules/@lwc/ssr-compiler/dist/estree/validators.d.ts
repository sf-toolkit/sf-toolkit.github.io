import type { CallExpression, Identifier, MemberExpression } from 'estree';
import type { Checker } from 'estree-toolkit/dist/generated/is-type';
import type { Node } from 'estree-toolkit/dist/helpers';
/** Node representing an identifier named "render". */
type RenderIdentifier = Identifier & {
    name: 'render';
};
/** Node representing a member expression `<something>.render`. */
type RenderMemberExpression = MemberExpression & {
    property: RenderIdentifier;
};
/** Node representing a method call `<something>.render()`. */
type RenderCall = CallExpression & {
    callee: RenderMemberExpression;
};
/** Returns `true` if the node is an identifier or `<something>.render()`. */
export declare const isIdentOrRenderCall: {
    (node: Node | null | undefined): node is Identifier | RenderCall;
    __debugName: string;
};
/** A validator that returns `true` if the node is `null`. */
type NullableChecker<T extends Node> = (node: Node | null | undefined) => node is T | null;
/** Extends a validator to return `true` if the node is `null`. */
export declare function isNullableOf<T extends Node>(validator: Checker<T>): NullableChecker<T>;
export declare namespace isNullableOf {
    var __debugName: string;
}
export {};
