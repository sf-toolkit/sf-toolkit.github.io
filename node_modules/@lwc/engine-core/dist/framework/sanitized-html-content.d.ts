import type { RendererAPI } from './renderer';
declare const sanitizedHtmlContentSymbol: unique symbol;
export type SanitizedHtmlContent = {
    [sanitizedHtmlContentSymbol]: unknown;
};
/**
 * Wrap a pre-sanitized string designated for `.innerHTML` via `lwc:inner-html`
 * as an object with a Symbol that only we have access to.
 * @param sanitizedString
 * @returns SanitizedHtmlContent
 */
export declare function createSanitizedHtmlContent(sanitizedString: unknown): SanitizedHtmlContent;
/**
 * Safely call setProperty on an Element while handling any SanitizedHtmlContent objects correctly
 *
 * @param setProperty - renderer.setProperty
 * @param elm - Element
 * @param key - key to set
 * @param value -  value to set
 */
export declare function safelySetProperty(setProperty: RendererAPI['setProperty'], elm: Element, key: string, value: any): void;
/**
 * Given two objects (likely either a string or a SanitizedHtmlContent object), return true if their
 * string values are equivalent.
 * @param first
 * @param second
 */
export declare function isSanitizedHtmlContentEqual(first: any, second: any): boolean;
export {};
