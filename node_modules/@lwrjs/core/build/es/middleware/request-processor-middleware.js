/**
 * Parse passed to us via the X-Mobify-Request-Class.
 *
 * basePath: The dynamic base path
 *  '' or undefined -> LWR basePath ''
 *  token or /token -> LWR basePath '/token'
 *
 */
import { logger } from '@lwrjs/diagnostics';
import { parseRequestDepthHeader } from '@lwrjs/shared-utils';
const MRT_REQUEST_CLASS = 'X-Mobify-Request-Class';
const MRT_REQUEST_CLASS_KEY = MRT_REQUEST_CLASS.toLowerCase();
export function requestProcessorMiddleware(app, context) {
    const { basePath } = context.runtimeEnvironment;
    app.use(async (req, res, next) => {
        let requestClass;
        let requestDepth;
        if (req.headers) {
            // If debug print log all the headers
            if (logger.isDebugEnabled()) {
                logger.debug({
                    label: `request-processor-middleware`,
                    message: `Request: ${req.originalUrl}`,
                });
                // Loop through and print each header
                for (const headerName in req.headers) {
                    logger.debug({
                        label: `request-processor-middleware`,
                        message: `Header ${headerName}: ${req.headers[headerName]}`,
                    });
                }
            }
            requestClass = req.headers[MRT_REQUEST_CLASS_KEY];
            requestDepth = parseRequestDepthHeader(req.headers);
        }
        // TODO Clean up once we have a long term solution
        if (requestDepth && requestDepth > 0) {
            logger.error({
                label: 'request-processor-middleware',
                message: `Lambda SSR request cycle detected: ${req.originalUrl}`,
            });
            // Return 400 Too Many Requests status
            return res.status(400).send('Request depth limit reached');
        }
        if (req.headers && typeof requestClass === 'string') {
            const parsedRequestClass = parseRequestClass(requestClass);
            logger.debug({
                label: `request-processor-middleware`,
                message: `parsedRequestClass?.basePath: ${parsedRequestClass?.basePath}`,
            });
            const pathValue = parsedRequestClass?.basePath || basePath || '';
            // If base path is '' or starts with / leave it alone
            req.basePath = pathValue === '' || pathValue.indexOf('/') === 0 ? pathValue : `/${pathValue}`;
        }
        else {
            logger.debug({
                label: `request-processor-middleware`,
                message: `${MRT_REQUEST_CLASS_KEY} ignored ${req.headers ? req.headers[MRT_REQUEST_CLASS_KEY] : 'no-headers'}`,
            });
            req.basePath = basePath;
        }
        // await is required when calling next to support koa
        await next();
    });
}
function parseRequestClass(requestClass) {
    // Split the Forwarded header into individual key-value pairs
    const keyValuePairs = requestClass.split(';');
    // Create an object to store the parsed values
    const parsed = {};
    // Iterate through the key-value pairs and populate the parsed object
    for (const pair of keyValuePairs) {
        const [key, value] = pair.split('=');
        parsed[key] = value;
    }
    return parsed;
}
//# sourceMappingURL=request-processor-middleware.js.map