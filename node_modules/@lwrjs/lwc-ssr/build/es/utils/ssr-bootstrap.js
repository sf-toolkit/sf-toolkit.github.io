import { getBundle, getCode } from './amd-utils.js';
import { parseBootstrapSpecifier } from '../identity.js';
import runCode from './sandbox.js';
import { performance } from 'perf_hooks';
import { logger } from '@lwrjs/diagnostics';
import { getTracer, ViewSpan } from '@lwrjs/instrumentation';
import { buildEnvironmentContext } from '@lwrjs/shared-utils';
const EMIT_WIRES = `globalThis.lwcRuntimeFlags = { ENABLE_WIRE_SYNC_EMIT: true };`; // Invoke wire adapters immediately after a component is connected
/**
 * Create a bundle for the given server bootstrap module and run the code in a sandbox.
 * @param moduleInfo - specifier: The ID of the module, generated by "lwc-ssr/moduleProvider"
 *                     props: A map of the key:value property pairs parsed from the custom element attributes (ie: all string values)
 * @param moduleBundler
 * @param runtimeEnvironment
 * @returns a promise to the data/html/caching results
 */
export async function runServerBootstrap({ specifier, props: templateProps, serverData = {}, }, moduleBundler, resourceRegistry, routes, 
// TODO we need to normalize AppConfig and ProviderApp config along with ProviderContext and ViewProviderContext
ssrContext) {
    const { config, runtimeEnvironment, runtimeParams } = ssrContext;
    const { format } = runtimeEnvironment;
    const { bundleRecord, code, specifier: bundleSpecifier, version, } = await getServerBundleSource(specifier, runtimeEnvironment, runtimeParams, moduleBundler, routes);
    // Gather context to send into the sandbox
    const context = {
        props: templateProps,
        url: runtimeParams.url,
        params: runtimeParams.params || {},
        query: runtimeParams.query || {},
        locale: runtimeParams.locale || runtimeEnvironment.i18n.defaultLocale,
        basePath: runtimeParams.basePath || runtimeEnvironment.basePath,
    };
    const environment = {
        // Used for import.meta.env.SSR
        // Note: this is always true because this script is executed on the server
        SSR: true,
        // Used by `lwr/environment`
        ...buildEnvironmentContext(runtimeParams),
    };
    // Since this code may be run in the main thread do not wipe out the global process.env
    const environmentCode = `globalThis.LWR = {...globalThis.LWR, env: ${JSON.stringify(environment)}};`;
    const host = runtimeParams.host;
    const requestDepth = runtimeParams.requestDepth;
    const options = {
        cacheDir: config.cacheDir,
        bundleSpecifier,
        host,
        requestDepth,
    };
    const startTime = performance.now();
    return getTracer().trace({
        name: ViewSpan.ServerSideRender,
        attributes: { specifier: bundleSpecifier },
    }, async () => {
        try {
            const { results, errors } = format === 'amd'
                ? await runCode([
                    EMIT_WIRES,
                    environmentCode,
                    ...(await getCode(runtimeEnvironment, serverData, version.replace(/\./g, '_'), bundleSpecifier, bundleRecord.includedModules, resourceRegistry)),
                    code,
                ], context, options)
                : await runCode([EMIT_WIRES, environmentCode, code], context, options);
            const endTime = performance.now();
            const timeDiff = endTime - startTime;
            logger.info({
                label: `Server-side Rendering`,
                message: `${specifier} in ${Math.round(timeDiff)} ms`,
            });
            return { results, errors: errors && Object.keys(errors).length > 0 ? errors : undefined };
        }
        catch (e) {
            // catch and wrap higher level errors
            const info = parseBootstrapSpecifier(specifier, routes);
            return { errors: { [info ? info.rootSpecifiers.join(',') : specifier]: e } };
        }
    });
}
async function getServerBundleSource(specifier, runtimeEnvironment, runtimeParams, moduleBundler, routes) {
    // Get view bundle
    return getTracer().trace({
        name: ViewSpan.ServerBundle,
        attributes: {
            specifier,
            ssrStaticBundles: `${runtimeEnvironment.featureFlags?.SSR_STATIC_BUNDLES || 'false'}`,
        },
    }, async () => {
        const { format } = runtimeEnvironment;
        const def = format === 'esm'
            ? await moduleBundler.getModuleBundle({ specifier }, 
            // Ensure the bundle flag is always off in ESM,
            // otherwise TOO much gets bundled in the module registry
            // in ESM, resulting lwc clashes/duplication
            { ...runtimeEnvironment, bundle: false }, runtimeParams, {
                exclude: [],
                alias: {
                    // override the default "@lwc/engine-dom" package
                    lwc: '@lwc/engine-server',
                },
            })
            : await getBundle(specifier, moduleBundler, routes, runtimeEnvironment, runtimeParams);
        return def;
    });
}
//# sourceMappingURL=ssr-bootstrap.js.map