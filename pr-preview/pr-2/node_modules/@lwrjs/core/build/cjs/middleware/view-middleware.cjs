var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/core/src/middleware/view-middleware.ts
__markAsModule(exports);
__export(exports, {
  viewMiddleware: () => viewMiddleware
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_router = __toModule(require("@lwrjs/router"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_error_handling = __toModule(require("./utils/error-handling.cjs"));
var import_view_registry = __toModule(require("@lwrjs/view-registry"));
function createViewMiddleware(route, errorRoutes, context, viewHandler) {
  const errorRoute = errorRoutes.find((route2) => route2.status === 500);
  const appConfig = context.appConfig;
  const {environment: environmentConfig} = appConfig;
  return async (req, res) => {
    if (!req.validateEnvironmentRequest(appConfig)) {
      res.status(400);
      res.send(import_diagnostics.descriptions.UNRESOLVABLE.INVALID_ENVIRONMENT(req.params.environment).message);
      return;
    }
    if (!req.validateJsonRequest()) {
      res.status(400);
      res.send(import_diagnostics.descriptions.UNRESOLVABLE.INVALID_JSON().message);
      return;
    }
    const {runtimeEnvironment, runtimeParams: defaultRuntimeParams} = req.getRuntimeContext(context.runtimeEnvironment);
    if (!defaultRuntimeParams.environment && environmentConfig?.default) {
      defaultRuntimeParams.environment = environmentConfig.default;
    }
    const viewRequest = {
      url: req.originalUrl,
      params: req.params,
      query: req.query,
      requestPath: req.path
    };
    const runtimeParams = {
      ...defaultRuntimeParams,
      url: viewRequest.url,
      params: viewRequest.params,
      query: viewRequest.query
    };
    const resolve = req.isJsonRequest() ? viewHandler.getViewJson : viewHandler.getViewContent;
    let viewResponse;
    let resolvedRoute;
    let traceId;
    try {
      viewResponse = await (0, import_instrumentation.getTracer)().trace({
        name: import_instrumentation.RequestHandlerSpan.GetView,
        attributes: {
          view: route.id,
          url: req.originalUrl,
          host: runtimeParams.host,
          basePath: runtimeParams.basePath,
          locale: runtimeParams.locale
        }
      }, (span) => {
        traceId = span.traceId;
        return resolve.call(viewHandler, viewRequest, route, runtimeEnvironment, runtimeParams);
      });
      resolvedRoute = route;
    } catch (err) {
      if (!errorRoute) {
        throw err;
      }
      import_diagnostics.logger.error(`[view-middleware] Route Error ${req.originalUrl}`);
      import_diagnostics.logger.error(err);
      viewResponse = await (0, import_instrumentation.getTracer)().trace({
        name: import_instrumentation.RequestHandlerSpan.GetView,
        attributes: {
          view: errorRoute.id
        }
      }, () => {
        return resolve.call(viewHandler, viewRequest, errorRoute, runtimeEnvironment, runtimeParams);
      });
      resolvedRoute = errorRoute;
    }
    if (req.isSiteGeneration()) {
      res.setSiteGenerationMetadata(viewResponse.metadata);
    }
    res.type("text/html");
    if (viewResponse.headers) {
      res.set(viewResponse.headers);
    }
    if (!res.hasHeader("cache-control")) {
      const cacheTtl = (0, import_shared_utils.shortestTtl)(viewResponse.cache?.ttl, resolvedRoute.cache?.ttl);
      if (cacheTtl) {
        res.setHeader("cache-control", `public, max-age=${cacheTtl}`);
      }
    }
    if (traceId?.length) {
      res.setHeader("x-trace-id", traceId);
    }
    const status = resolvedRoute.status || viewResponse.status || 200;
    res.status(status);
    res.send(viewResponse.body);
  };
}
function createConfigMiddleware(routes, context, viewHandler) {
  return async (req, res) => {
    const {runtimeEnvironment, runtimeParams: defaultRuntimeParams} = req.getRuntimeContext(context.runtimeEnvironment);
    const {appId, encodedViewPath} = req.params;
    const route = routes.find((route2) => route2.id === appId);
    if (!route) {
      res.status(404).send(import_diagnostics.descriptions.UNRESOLVABLE.APP_CONFIG(appId).message);
      return;
    }
    const url = (0, import_shared_utils.decodeViewPath)(encodedViewPath);
    let requestPath = url;
    const query = {};
    if (url.indexOf("?") !== -1) {
      requestPath = url.substring(0, url.indexOf("?"));
      const searchParams = new URLSearchParams(url.substring(url.indexOf("?")));
      for (const [key, value] of searchParams.entries()) {
        query[key] = value;
      }
    }
    const originalUrl = req.originalUrl;
    const routePath = route.path;
    const params = (0, import_shared_utils.extractRequestParams)(routePath, url, req.params);
    const viewRequest = {
      url,
      originalUrl,
      params,
      query,
      requestPath
    };
    const runtimeParams = {
      ...defaultRuntimeParams,
      url: viewRequest.url,
      params: viewRequest.params,
      query: viewRequest.query
    };
    const viewResponse = await viewHandler.getViewConfiguration(viewRequest, route, runtimeEnvironment, runtimeParams);
    if (!viewResponse) {
      res.status(404).send(import_diagnostics.descriptions.UNRESOLVABLE.VIEW_CONFIG(url).message);
      return;
    }
    if (!res.hasHeader("cache-control")) {
      const cacheTtl = (0, import_shared_utils.shortestTtl)(viewResponse.cache?.ttl, route.cache?.ttl);
      if (cacheTtl) {
        res.setHeader("cache-control", `public, max-age=${cacheTtl}`);
      }
    }
    res.status(200);
    res.type("application/javascript");
    res.status(viewResponse.status || 200);
    res.send(viewResponse.body);
  };
}
function createNotFoundMiddleware(errorRoutes, context, viewHandler) {
  const notFoundRoute = errorRoutes.find((route) => route.status === 404);
  if (notFoundRoute) {
    return createViewMiddleware(notFoundRoute, errorRoutes, context, viewHandler);
  }
  return (req, res) => {
    res.status(404).send(import_diagnostics.descriptions.UNRESOLVABLE.VIEW(req.originalUrl).message);
  };
}
function viewMiddleware(app, context) {
  const {appConfig, viewRegistry, moduleRegistry, routeHandlers} = context;
  const {i18n, routes, errorRoutes} = appConfig;
  const viewHandler = new import_view_registry.LwrViewHandler({viewRegistry, moduleRegistry, routeHandlers}, appConfig);
  for (const route of routes) {
    const paths = [route.path];
    const subRoutes = route.subRoutes && (0, import_router.getClientRoutes)(route.subRoutes);
    if (subRoutes) {
      const prefix = route.path === "/" ? "" : route.path;
      subRoutes.routes.forEach((subRoute) => subRoute.uri !== route.path && paths.push(`${prefix}${subRoute.uri}`));
    }
    if (i18n.uriPattern === "path-prefix") {
      const supportedStr = i18n.locales.map((l) => l.id).filter((id) => id !== i18n.defaultLocale).join("|");
      if (supportedStr) {
        const defaultLocalePaths = paths.map((routePath) => `/${i18n.defaultLocale}${routePath}`);
        paths.forEach((routePath) => {
          const localizedPath = `/:locale(${supportedStr})${routePath}`;
          paths.push(localizedPath);
        });
        addDefaultLocaleRedirects(i18n.defaultLocale, defaultLocalePaths, app);
      }
    }
    import_diagnostics.logger.debug({label: `view-middleware`, message: `Add view paths ${paths}`});
    app.get(paths, (0, import_error_handling.handleErrors)(createViewMiddleware(route, errorRoutes, context, viewHandler)));
  }
  app.get((0, import_shared_utils.getClientBootstrapConfigurationRoutes)(), (0, import_error_handling.handleErrors)(createConfigMiddleware(routes, context, viewHandler)));
  app.get("/" + app.getRegexWildcard(), (0, import_error_handling.handleErrors)(createNotFoundMiddleware(errorRoutes, context, viewHandler)));
}
function addDefaultLocaleRedirects(defaultLocale, defaultLocalePaths, app) {
  import_diagnostics.logger.debug({label: `view-middleware`, message: `Add default localized paths ${defaultLocalePaths}`});
  app.get(defaultLocalePaths, (req, res) => {
    let modifiedPath = req.originalUrl.replace(`/${defaultLocale}`, "");
    if (modifiedPath.indexOf("/") !== 0) {
      modifiedPath = `/${modifiedPath}`;
    }
    res.setHeader("Location", modifiedPath);
    return res.sendStatus(301);
  });
}
