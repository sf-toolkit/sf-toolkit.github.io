import path from 'path';
import fs from 'fs-extra';
import { logger } from '@lwrjs/diagnostics';
const SITE_METADATA_PATH = '.metadata';
const STATIC_BUNDLE_METADATA_PATH = path.join(SITE_METADATA_PATH, '/bundle-metadata.json');
const DEBUG_STATIC_BUNDLE_METADATA_PATH = path.join(SITE_METADATA_PATH, '/bundle-metadata-debug.json');
const STATIC_RESOURCE_METADATA_PATH = path.join(SITE_METADATA_PATH, '/resource-metadata.json');
const DEBUG_STATIC_RESOURCE_METADATA_PATH = path.join(SITE_METADATA_PATH, '/resource-metadata-debug.json');
const STATIC_ASSET_METADATA_PATH = path.join(SITE_METADATA_PATH, '/asset-metadata.json');
export class SiteMetadataImpl {
    constructor(options) {
        this.options = options;
        this.siteBundles = this.readStaticBundleMetadata(options.rootDir, STATIC_BUNDLE_METADATA_PATH);
        this.debugSiteBundles = this.readStaticBundleMetadata(options.rootDir, DEBUG_STATIC_BUNDLE_METADATA_PATH);
        this.siteResources = this.readStaticResourceMetadata(options.rootDir, STATIC_RESOURCE_METADATA_PATH);
        this.debugSiteResources = this.readStaticResourceMetadata(options.rootDir, DEBUG_STATIC_RESOURCE_METADATA_PATH);
        this.siteAssets = this.readStaticAssetsMetadata(options.rootDir, STATIC_ASSET_METADATA_PATH);
    }
    getSiteRootDir() {
        return this.options.rootDir;
    }
    getSiteBundles() {
        return this.siteBundles;
    }
    getDebugSiteBundles() {
        return this.debugSiteBundles;
    }
    getSiteResources() {
        return this.siteResources;
    }
    getDebugSiteResources() {
        return this.debugSiteResources;
    }
    getSiteAssets() {
        return this.siteAssets;
    }
    async persistSiteMetadata() {
        // Create the metadata directory if if does not exist
        const siteMetadataPath = path.join(this.options.rootDir, SITE_METADATA_PATH);
        if (siteMetadataPath.indexOf('__skip_directory_creation__') !== -1)
            return;
        try {
            if (!fs.existsSync(siteMetadataPath)) {
                await fs.mkdir(siteMetadataPath, { recursive: true });
            }
            // Save Bundle Metadata
            const bundleMetadataPath = path.join(this.options.rootDir, STATIC_BUNDLE_METADATA_PATH);
            await fs.writeJSON(bundleMetadataPath, this.siteBundles, { spaces: 2 });
            // Save Debug Bundle Metadata
            const debugBundleMetadataPath = path.join(this.options.rootDir, DEBUG_STATIC_BUNDLE_METADATA_PATH);
            await fs.writeJSON(debugBundleMetadataPath, this.debugSiteBundles, { spaces: 2 });
            // Save Resource Metadata
            const resourceMetadataPath = path.join(this.options.rootDir, STATIC_RESOURCE_METADATA_PATH);
            await fs.writeJSON(resourceMetadataPath, this.siteResources, { spaces: 2 });
            // Save Debug Resource Metadata
            const debugResourceMetadataPath = path.join(this.options.rootDir, DEBUG_STATIC_RESOURCE_METADATA_PATH);
            await fs.writeJSON(debugResourceMetadataPath, this.siteResources, { spaces: 2 });
            // Save Resource Metadata
            const assetMetadataPath = path.join(this.options.rootDir, STATIC_ASSET_METADATA_PATH);
            return fs.writeJSON(assetMetadataPath, this.siteAssets, { spaces: 2 });
        }
        catch (err) {
            logger.error(`[SiteMetadata] Failed to save site metadata ${siteMetadataPath}`);
            logger.error(err);
        }
    }
    readStaticBundleMetadata(staticRoot, metadataPath) {
        let bundleMetadataPath;
        let siteBundles = { bundles: {} };
        try {
            bundleMetadataPath = path.join(staticRoot, metadataPath);
            const savedMetadata = fs.readJSONSync(bundleMetadataPath);
            siteBundles = savedMetadata;
        }
        catch (error) {
            if (error.code === 'ENOENT') {
                logger.debug({
                    label: `SiteMetadata`,
                    message: `Failed to load Static Bundle Metadata: ${bundleMetadataPath}`,
                });
            }
            else {
                throw error;
            }
        }
        return siteBundles;
    }
    /**
     * Read the metadata about the pre-built resources of the current site.
     */
    readStaticResourceMetadata(staticRoot, metadataPath) {
        let resourceMetadataPath;
        let siteResources = { resources: {} };
        try {
            resourceMetadataPath = path.join(staticRoot, metadataPath);
            const savedMetadata = fs.readJSONSync(resourceMetadataPath);
            siteResources = savedMetadata;
        }
        catch (error) {
            if (error.code === 'ENOENT') {
                logger.debug({
                    label: `SiteMetadata`,
                    message: `Failed to load Static Resource Metadata: ${resourceMetadataPath}`,
                });
            }
            else {
                throw error;
            }
        }
        return siteResources;
    }
    /**
     * Read the metadata about the pre-built assets of the current site.
     */
    readStaticAssetsMetadata(staticRoot, metadataPath) {
        let assetMetadataPath;
        let siteAssets = {
            assets: {},
        };
        try {
            assetMetadataPath = path.join(staticRoot, metadataPath);
            siteAssets = fs.readJSONSync(assetMetadataPath);
        }
        catch (error) {
            if (error.code === 'ENOENT') {
                logger.debug({
                    label: `SiteMetadata`,
                    message: `Failed to load Static Resource Metadata: ${assetMetadataPath}`,
                });
            }
            else {
                throw error;
            }
        }
        return siteAssets;
    }
}
//# sourceMappingURL=site-metadata.js.map