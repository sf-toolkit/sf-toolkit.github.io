var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/utils/sandbox-vm.ts
__markAsModule(exports);
__export(exports, {
  default: () => runCode
});
var import_node_vm = __toModule(require("node:vm"));
var import_crypto = __toModule(require("crypto"));
var import_url = __toModule(require("url"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_utils = __toModule(require("./utils.cjs"));
function runCode(codes, context, options) {
  return new Promise((resolve, reject) => {
    let resolver;
    const p = new Promise((r) => resolver = r);
    function getContext() {
      return context;
    }
    const tracer = (0, import_instrumentation.getTracer)();
    const trace = tracer.trace.bind(tracer);
    const {host, requestDepth} = options;
    const fetchEndowment = (0, import_utils.createFetchEndowment)(trace, host, requestDepth);
    const fetchController = new import_utils.FetchController(fetchEndowment);
    const vmContext = {
      getContext,
      resolver,
      stringifyError: import_diagnostics.stringifyError,
      trace,
      AbortController,
      AbortSignal,
      atob,
      btoa,
      console,
      crypto: import_crypto.webcrypto,
      Headers,
      Intl,
      fetch: fetchController.controlledFetch,
      Request,
      Response,
      URL: import_url.URL,
      URLSearchParams: import_url.URLSearchParams,
      process,
      setTimeout,
      clearTimeout,
      setInterval,
      clearInterval,
      setImmediate,
      clearImmediate
    };
    import_node_vm.default.createContext(vmContext);
    const time = (0, import_utils.getWatchdogTime)();
    const timerId = (0, import_utils.startWatchdogTimer)(() => {
      reject((0, import_diagnostics.createSingleDiagnosticError)({description: import_diagnostics.descriptions.UNRESOLVABLE.SSR_TIMEOUT(options.bundleSpecifier, time)}, import_diagnostics.LwrUnresolvableError));
    }, time);
    try {
      import_node_vm.default.runInContext(codes.join("\n"), vmContext);
      p.then((r) => {
        (0, import_utils.stopWatchdogTimer)(timerId);
        resolve(r);
      }).catch((e) => {
        import_diagnostics.logger.error(e);
        reject(e);
      }).finally(() => {
        fetchController.activateKillSwitch();
      });
    } catch (e) {
      import_diagnostics.logger.error(e);
      (0, import_utils.stopWatchdogTimer)(timerId);
      fetchController.activateKillSwitch();
      reject(e);
    }
  });
}
