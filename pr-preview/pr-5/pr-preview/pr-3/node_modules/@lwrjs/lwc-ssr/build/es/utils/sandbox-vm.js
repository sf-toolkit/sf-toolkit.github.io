import vm from 'node:vm';
import { webcrypto as crypto } from 'crypto';
import { URL, URLSearchParams } from 'url';
import { LwrUnresolvableError, createSingleDiagnosticError, descriptions, logger, stringifyError, } from '@lwrjs/diagnostics';
import { getTracer } from '@lwrjs/instrumentation';
import { FetchController, createFetchEndowment, getWatchdogTime, startWatchdogTimer, stopWatchdogTimer, } from './utils.js';
export default function runCode(codes, context, options) {
    return new Promise((resolve, reject) => {
        let resolver;
        const p = new Promise((r) => (resolver = r));
        function getContext() {
            return context;
        }
        const tracer = getTracer();
        const trace = tracer.trace.bind(tracer);
        const { host, requestDepth } = options;
        const fetchEndowment = createFetchEndowment(trace, host, requestDepth);
        const fetchController = new FetchController(fetchEndowment);
        const vmContext = {
            // LWRJS functions
            getContext,
            resolver,
            stringifyError,
            trace,
            // allowed globals
            AbortController,
            AbortSignal,
            atob,
            btoa,
            console,
            crypto,
            Headers,
            Intl,
            fetch: fetchController.controlledFetch,
            Request,
            Response,
            URL,
            URLSearchParams,
            // for AMD loader ModuleRegistry
            process,
            setTimeout,
            clearTimeout,
            setInterval,
            clearInterval,
            // for completeness
            setImmediate,
            clearImmediate,
        };
        vm.createContext(vmContext);
        const time = getWatchdogTime();
        const timerId = startWatchdogTimer(() => {
            // TODO: terminate the VM
            reject(createSingleDiagnosticError({ description: descriptions.UNRESOLVABLE.SSR_TIMEOUT(options.bundleSpecifier, time) }, LwrUnresolvableError));
        }, time);
        try {
            vm.runInContext(codes.join('\n'), vmContext);
            p.then((r) => {
                stopWatchdogTimer(timerId);
                resolve(r);
            })
                .catch((e) => {
                logger.error(e);
                reject(e);
            })
                .finally(() => {
                fetchController.activateKillSwitch();
            });
        }
        catch (e) {
            logger.error(e);
            stopWatchdogTimer(timerId);
            fetchController.activateKillSwitch();
            reject(e);
        }
    });
}
//# sourceMappingURL=sandbox-vm.js.map