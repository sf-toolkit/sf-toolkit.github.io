import path from 'path';
import fs from 'fs-extra';
import { hashContent, stringToVariableName } from '@lwrjs/shared-utils';
import { getTracer } from '@lwrjs/instrumentation';
import { FETCH_ENDOWMENT, TRACER } from './utils.js';
import { logger } from '@lwrjs/diagnostics';
const SSR_DIR_NAME = 'ssr';
function getSSRCodeFolder(cacheDir) {
    const ssrCodeFolder = path.join(cacheDir, SSR_DIR_NAME, stringToVariableName(new Date().toISOString()));
    if (!fs.existsSync(ssrCodeFolder)) {
        fs.mkdirSync(ssrCodeFolder, { recursive: true });
    }
    return ssrCodeFolder;
}
function getFilePath(specifier, directory) {
    const fileToken = specifier.length > 100 ? hashContent(specifier) : specifier;
    return path.join(getSSRCodeFolder(directory), stringToVariableName(`${fileToken}_${Date.now()}`) + '.cjs');
}
export default function runCode(codes, context, options) {
    const { bundleSpecifier, cacheDir } = options;
    return new Promise((resolve, reject) => {
        try {
            const filePath = getFilePath(bundleSpecifier, cacheDir);
            const tracer = getTracer();
            // We are polluting the global scope here, but it is only used for debugging
            globalThis.trace = tracer.trace.bind(tracer);
            globalThis.resolver = (results) => {
                results.filePath = filePath;
                resolve(results);
            };
            const CONTEXT_CODE = `const { webcrypto: crypto } = require('crypto');
globalThis.stringifyError=(e)=>(typeof e=='string'||e instanceof String)?e:require('util').inspect(e);
if (!globalThis.trace) {
    ${TRACER};
}
// just console log if running as script
if (!globalThis.resolver) {
    globalThis.resolver = (results) => {
        console.log(results)
    };
}
globalThis.getContext = () => ({ ...${JSON.stringify(context)}, host: '${options.host}' });
const workerData = { host: '${options.host}', requestDepth: ${options.requestDepth}};
${FETCH_ENDOWMENT}`;
            const sandboxCode = [
                `// ssr code for ${bundleSpecifier}`,
                // Adding `debugger` to trigger breakpoints
                `debugger;`,
                CONTEXT_CODE,
                ...codes,
            ].join('\n');
            fs.writeFileSync(filePath, sandboxCode);
            logger.info({
                label: 'ssr-gen',
                message: filePath,
            });
            import(filePath).catch(reject);
        }
        catch (err) {
            reject(err);
        }
    });
}
//# sourceMappingURL=ssr-debug.js.map