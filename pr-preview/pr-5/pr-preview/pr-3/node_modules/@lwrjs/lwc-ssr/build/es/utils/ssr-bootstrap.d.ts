import type { Json, PublicModuleBundler, PublicResourceRegistry, RuntimeEnvironment, RuntimeParams, ServerData } from '@lwrjs/types';
import type { Route } from '../identity.js';
import type { SandboxResults } from './sandbox.js';
/**
 * Create a bundle for the given server bootstrap module and run the code in a sandbox.
 * @param moduleInfo - specifier: The ID of the module, generated by "lwc-ssr/moduleProvider"
 *                     props: A map of the key:value property pairs parsed from the custom element attributes (ie: all string values)
 * @param moduleBundler
 * @param runtimeEnvironment
 * @returns a promise to the data/html/caching results
 */
export declare function runServerBootstrap({ specifier, props: templateProps, serverData, }: {
    specifier: string;
    props: {
        [prop: string]: Json;
    };
    serverData?: ServerData;
}, moduleBundler: PublicModuleBundler, resourceRegistry: PublicResourceRegistry, routes: Route[], ssrContext: {
    config: {
        cacheDir: string;
    };
    runtimeEnvironment: RuntimeEnvironment;
    runtimeParams: RuntimeParams;
}): Promise<SandboxResults>;
//# sourceMappingURL=ssr-bootstrap.d.ts.map