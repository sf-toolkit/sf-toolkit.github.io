"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTestUsingFakeTimer = exports.toBeAccessible = void 0;
const jest_matcher_utils_1 = require("jest-matcher-utils");
const assert_1 = require("@sa11y/assert");
const format_1 = require("@sa11y/format");
const preset_rules_1 = require("@sa11y/preset-rules");
const fakeTimerErrMsg = 'Cannot run accessibility check when Jest fake timer is in use. ' +
    'Switch to real timer before invoking accessibility check. ' +
    'Ref: https://jestjs.io/docs/timer-mocks';
const matcherHintMsg = `expected document to have no accessibility violations but found`;
const expectedMsg = `0 issues`;
const formatOptions = {
    a11yViolationIndicator: 'â­•',
    helpUrlIndicator: 'ðŸ”—',
    highlighter: jest_matcher_utils_1.printReceived,
    deduplicate: false,
};
/**
 * Jest expect matcher to check DOM for accessibility issues
 * @param received - DOM or HTML Element to be tested for accessibility. Defaults to current DOM.
 * @param config - A11yConfig to be used to test for accessibility. Defaults to `base` ruleset.
 */
async function toBeAccessible(received = document, config = preset_rules_1.defaultRuleset) {
    let isAccessible = true;
    // a11yError can be 'undefined' when used with `not` matcher and there is no error
    let a11yError = new format_1.A11yError([], []);
    let receivedMsg = expectedMsg;
    if (isTestUsingFakeTimer())
        throw new Error(fakeTimerErrMsg);
    // TODO (Improvement): Can we detect if this is invoked async and error if not ?
    try {
        await (0, assert_1.assertAccessible)(received, (0, preset_rules_1.adaptA11yConfig)(config));
    }
    catch (e) {
        if (e instanceof format_1.A11yError) {
            a11yError = e;
            isAccessible = false;
            receivedMsg = `${a11yError.length} issues`;
        }
        else {
            throw e;
        }
    }
    return {
        pass: isAccessible,
        message: () => (0, jest_matcher_utils_1.matcherHint)(`${toBeAccessible.name}: ${matcherHintMsg} ${receivedMsg}: \n\n ${a11yError.format(formatOptions)}`, `${a11yError.length} issues`, expectedMsg),
        a11yError: a11yError,
    };
}
exports.toBeAccessible = toBeAccessible;
/**
 * Detect if fake timer is being used in a jest test.
 * Fake timers result in axe timeout https://github.com/dequelabs/axe-core/issues/3055
 * Workaround until underlying issue can be fixed in axe.
 * Ref: https://github.com/facebook/jest/issues/10555
 */
function isTestUsingFakeTimer() {
    return (typeof jest !== 'undefined' &&
        typeof setTimeout !== 'undefined' &&
        // eslint-disable-next-line no-prototype-builtins
        (setTimeout.hasOwnProperty('_isMockFunction') || setTimeout.hasOwnProperty('clock')));
}
exports.isTestUsingFakeTimer = isTestUsingFakeTimer;
//# sourceMappingURL=matcher.js.map