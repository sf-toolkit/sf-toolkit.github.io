import { logger } from '@lwrjs/diagnostics';
import { ViewSpan, getTracer } from '@lwrjs/instrumentation';
import { LWC_SSR_PREFIX } from '../identity.js';
import { runServerBootstrap } from '../utils/ssr-bootstrap.js';
export { createFetchEndowment } from '../utils/utils.js';
const NAME = 'preload-data-transformer';
/**
 * This view transformer preloads data on the server for CSRed routes.
 * If the route has:
 *  - a "rootComponent" and
 *  - the "ssr" bootstrap flag is OFF
 * then it will:
 *  - run getServerData() from the rootComponent and
 *  - serialize the output into globalThis.LWR.serverData
 * To consume the data on the client, access globalThis.LWR.serverData from a bootstrap service.
 */
export default function preloadDataViewTransformer(_options, { config, moduleBundler, resourceRegistry }) {
    const routes = [...config.routes, ...config.errorRoutes];
    return {
        name: NAME,
        async link(_stringBuilder, viewContext, metadata) {
            const { rootComponent } = viewContext.view;
            if (!rootComponent ||
                !viewContext.view.bootstrap?.preloadData ||
                viewContext.view.bootstrap?.ssr) {
                return {}; // must be a CSRed rootComponent with preloadData ON
            }
            logger.debug({ label: NAME, message: `Preload data for root component "${rootComponent}"` });
            const { results = {}, errors } = await getTracer().trace({
                name: ViewSpan.PreloadData,
                attributes: { rootComponent },
            }, async () => {
                return await runServerBootstrap({ specifier: `${LWC_SSR_PREFIX}${viewContext.view.id}/${rootComponent}`, props: {} }, moduleBundler, resourceRegistry, routes, viewContext);
            });
            // If we find errors just log as warnings since these are SSR errors for a CSR page
            if (errors) {
                for (const err of Object.entries(errors)) {
                    logger.warn({
                        label: 'preloadDataViewTransformer',
                        message: `Unexpected error during preload data: ${err[0]}`,
                    }, err[1]);
                }
                // Returns no data since there was an error loading modules
                return {};
            }
            // Log and process the data response
            const { props, cache: { ttl } = { ttl: undefined } } = results[rootComponent];
            logger.verbose({ label: NAME, message: 'response', additionalInfo: props });
            metadata.serverData = metadata.serverData || {}; // create serverData if necessary
            Object.assign(metadata.serverData, props); // add the preloaded data to serverData for serialization
            return { cache: { ttl } };
        },
    };
}
//# sourceMappingURL=index.js.map