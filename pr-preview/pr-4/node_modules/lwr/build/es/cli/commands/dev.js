import { Command } from 'commander';
import chalk from 'chalk';
import { logger } from '@lwrjs/diagnostics';
import { getModeOption, getPortOption, launch } from '../utils.js';
import { DEFAULT_PROXY_PORT, createProxyServer, findProxyConfiguration } from '@lwrjs/dev-proxy-server';
export function createDevCommand() {
    return new Command('dev')
        .description('Starts an LWR server (defaults to dev mode)')
        .addOption(getPortOption())
        .addOption(getModeOption().default('dev'))
        .option('-o, --open', `[boolean] open browser on startup`, false)
        .action(async (options, cmd) => {
        const { createServer } = await import('@lwrjs/core');
        const { port, mode, rootDir, config, open, logLevel } = cmd.optsWithGlobals();
        process.env.LWR_LOG_LEVEL = logLevel; // Set the log level
        // runtimePort can be undefined on invocation. The actual value is resolved via createServer()
        let runtimePort = port;
        const proxyPort = port === undefined ? DEFAULT_PROXY_PORT : port;
        try {
            const proxyConfig = findProxyConfiguration(rootDir);
            if (proxyConfig) {
                runtimePort = proxyPort + 1;
                // start an express proxy
                const proxyServer = createProxyServer({
                    port: proxyPort,
                    // TODO: expose this as a configurable property.
                    defaultHost: `http://localhost:${runtimePort}`,
                    ...proxyConfig,
                });
                await proxyServer.listen();
            }
            const server = createServer({
                port: runtimePort,
                serverMode: mode,
                rootDir,
                lwrConfigFile: config,
            });
            await server.listen(async ({ serverMode, port: appPort }) => {
                runtimePort = appPort;
            });
            const sitePort = proxyConfig !== undefined ? proxyPort : runtimePort;
            console.log(chalk.green(`Application is available at: http://localhost:${sitePort}`));
            if (open) {
                await launch(sitePort);
            }
        }
        catch (error) {
            logger.error(error);
            process.exit(1);
        }
    });
}
//# sourceMappingURL=dev.js.map