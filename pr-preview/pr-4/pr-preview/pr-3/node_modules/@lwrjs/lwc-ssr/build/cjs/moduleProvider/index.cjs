var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/moduleProvider/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => moduleProvider_default
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_identity = __toModule(require("../identity.cjs"));
function createDataCall(rootSpecifier, classImportName) {
  return `

    results['${rootSpecifier}'] = { props: context.props['${rootSpecifier}'] }; // props from HTML attributes
    if (${classImportName}.getServerData) {
        await globalThis.trace({
            name: '${import_instrumentation.ViewSpan.GetServerData}',
            attributes: { specifier: '${rootSpecifier}' }
        }, async() => {
            try {
                const data${classImportName} = await ${classImportName}.getServerData({ ...context, props: results['${rootSpecifier}'].props });
                Object.assign(serverData, data${classImportName}.props); // add props to server data
                Object.assign(results['${rootSpecifier}'], { props: data${classImportName}.props, markup: data${classImportName}.markup, cache: data${classImportName}.cache });
            } catch(e) {
                // add the root component specifier to the error message
                errors['${rootSpecifier}'] = 'Error in "getServerData" for "${rootSpecifier}": ' + stringifyError(e);
            }
        });
    }`;
}
function createServiceCall(serviceSpecifier, importName) {
  return `

    globalThis.trace({
        name: '${import_instrumentation.ViewSpan.BootstrapService}',
        attributes: { serviceSpecifier: '${serviceSpecifier}' }
    }, () => {
        try {
            ${importName}({ serverData });
        } catch(e) {
            // add the service specifier to the error message
            errors['${serviceSpecifier}'] = 'An SSR error occurred in bootstrap service "${serviceSpecifier}": ' + stringifyError(e);
        }
    });`;
}
function createSsrCall(rootSpecifier, ctorImportName) {
  return `

    if (!errors['${rootSpecifier}']) { // skip SSR if getServerData failed
        const existingTaskCount${ctorImportName} = process.getActiveResourcesInfo ? process.getActiveResourcesInfo().length : 0;
        const html${ctorImportName} = globalThis.trace({
            name: '${import_instrumentation.ViewSpan.RenderComponent}',
            attributes: { specifier: '${rootSpecifier}' }
        }, () => {
            try {
                return renderComponent('${(0, import_shared_utils.moduleSpecifierToKebabCase)(rootSpecifier)}', ${ctorImportName}, results['${rootSpecifier}'].props || {});
            } catch(e) {
                // add the LWC rendering stack to the error message
                const message = e.message || stringifyError(e);
                const error = e.wcStack 
                    ? 'An error occurred during server-side rendering for component stack: ' + e.wcStack + '. Error was: ' + message
                    : 'An error occurred during server-side rendering: ' + message;
                errors['${rootSpecifier}'] = error;
            }
        });
        const currentTaskCount${ctorImportName} = process.getActiveResourcesInfo ? process.getActiveResourcesInfo().length : 0;
        if (currentTaskCount${ctorImportName} - existingTaskCount${ctorImportName} > 0) {
            console.warn('[warn] async tasks encountered while server rendering "${rootSpecifier}"');
        }
        Object.assign(results['${rootSpecifier}'], { html: html${ctorImportName} });
    }`;
}
function createServerBootstrapModule(rootSpecifiers, isSSR, services) {
  let rootImports = "", dataCalls = "", ssrCalls = "";
  rootSpecifiers.forEach((root) => {
    const ctorImportName = (0, import_shared_utils.stringToVariableName)(`Ctor_${root}`);
    const classImportName = (0, import_shared_utils.stringToVariableName)(`root_${root}`);
    rootImports += `
import ${ctorImportName}, * as ${classImportName} from '${root}';`;
    dataCalls += createDataCall(root, classImportName);
    ssrCalls += isSSR ? createSsrCall(root, ctorImportName) : "";
  });
  let serviceImports = "", serviceCalls = "";
  services.forEach((serviceSpecifier) => {
    const importName = (0, import_shared_utils.stringToVariableName)(`service_${serviceSpecifier}`);
    serviceImports += `
import ${importName} from '${serviceSpecifier}';`;
    serviceCalls += createServiceCall(serviceSpecifier, importName);
  });
  return `
import { renderComponent } from '@lwc/engine-server';${rootImports}${serviceImports}

(async () => {
    const results = {}; // { rootSpecifier: { html, props, markup, cache } }
    const errors = {};  // { rootSpecifier: error string }
    const serverData = globalThis.LWR?.serverData || {}; // data from view providers
    const context = globalThis.getContext(); // SsrRequestContext

    // 1. cleanup the LWR global properties before any customer code is run
    if (globalThis.LWR?.define) {
        // AMD: support dynamic imports in getServerData
        globalThis.LWR = Object.freeze({ define: globalThis.LWR.define, env: globalThis.LWR.env });
    } else {
        // ESM
        globalThis.LWR = Object.freeze({ env: globalThis.LWR.env });
    }

    // 2. pre-fetch data
    ${dataCalls}
    // 3. execute each SSR bootstrap service
    ${serviceCalls}
    // 4. render components
    ${ssrCalls}
    // 5. relay results
    globalThis.resolver({ results, errors });
})()`;
}
var ServerModuleProvider = class {
  constructor(providerConfig, {config, runtimeEnvironment: {lwrVersion}}) {
    this.name = "server-bootstrap-module-provider";
    this.version = lwrVersion;
    this.routes = [...config.routes, ...config.errorRoutes];
  }
  async getModuleEntry({specifier}) {
    if ((0, import_identity.parseBootstrapSpecifier)(specifier)) {
      const virtualId = `<virtual>/${specifier}`;
      return {
        id: `${virtualId}|${this.version}`,
        virtual: true,
        entry: virtualId,
        specifier,
        version: this.version
      };
    }
  }
  async getModule({specifier, namespace, name}) {
    const moduleEntry = await this.getModuleEntry({specifier});
    if (!moduleEntry) {
      return;
    }
    const {route, rootSpecifiers} = (0, import_identity.parseBootstrapSpecifier)(specifier, this.routes);
    const originalSource = createServerBootstrapModule(rootSpecifiers, !!route?.bootstrap.ssr, (0, import_identity.getSsrServices)(route));
    return {
      id: moduleEntry.id,
      namespace,
      name: name || specifier,
      version: this.version,
      specifier,
      moduleEntry,
      ownHash: (0, import_shared_utils.hashContent)(originalSource),
      originalSource,
      compiledSource: originalSource
    };
  }
};
var moduleProvider_default = ServerModuleProvider;
