"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerSa11yMatcher = exports.setup = void 0;
const matcher_1 = require("./matcher");
const common_1 = require("@sa11y/common");
const automatic_1 = require("./automatic");
const globals_1 = require("@jest/globals");
const preset_rules_1 = require("@sa11y/preset-rules");
/**
 * Default options for sa11y jest matcher
 */
const defaultSa11yOpts = {
    autoCheckOpts: {
        runAfterEach: false,
        cleanupAfterEach: false,
        consolidateResults: false,
        runDOMMutationObserver: false,
        enableIncompleteResults: false,
    },
};
function registerRemoveChild() {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    const originalRemoveChild = Element.prototype.removeChild;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
    Element.prototype.removeChild = function (oldChild) {
        if (oldChild.parentNode === this) {
            // Your custom implementation here
            if (!(0, automatic_1.getOriginalDocumentBodyHtml)()) {
                (0, automatic_1.setOriginalDocumentBodyHtml)(document?.body?.innerHTML ?? '');
            }
        }
        return originalRemoveChild.call(this, oldChild);
    };
}
const improvedChecksFilter = [
    'ui-email-stream-components/modules/emailStream/adminHealthInsights/__tests__/adminHealthInsights.test.js',
];
/**
 * Register Sa11y Jest API and automatic checks depending on {@link Sa11yOpts}
 * @param opts - {@link Sa11yOpts} to opt-in to automatic checks
 */
function setup(opts = defaultSa11yOpts) {
    if (process.env.SA11Y_AUTO) {
        const testPath = globals_1.expect.getState().testPath ?? '';
        const ignoreImprovedChecks = improvedChecksFilter.some((fileName) => testPath.toLowerCase().includes(fileName.toLowerCase()));
        if (!ignoreImprovedChecks) {
            registerRemoveChild();
        }
    }
    registerSa11yMatcher();
    (0, common_1.registerCustomRules)(preset_rules_1.changesData, preset_rules_1.rulesData, preset_rules_1.checkData);
    // Set defaults from env vars
    const autoCheckOpts = opts.autoCheckOpts;
    autoCheckOpts.runAfterEach || (autoCheckOpts.runAfterEach = !!process.env.SA11Y_AUTO);
    // Consolidate results if automatic checks is enabled
    autoCheckOpts.consolidateResults || (autoCheckOpts.consolidateResults = autoCheckOpts.runAfterEach);
    autoCheckOpts.cleanupAfterEach || (autoCheckOpts.cleanupAfterEach = !!process.env.SA11Y_CLEANUP);
    if (process.env.SA11Y_AUTO_FILTER?.trim().length)
        autoCheckOpts.filesFilter || (autoCheckOpts.filesFilter = process.env.SA11Y_AUTO_FILTER.split(','));
    const exemptedFiles = (0, common_1.useFilesToBeExempted)();
    if (exemptedFiles.length !== 0) {
        autoCheckOpts.filesFilter = (autoCheckOpts.filesFilter ?? []).concat(exemptedFiles);
    }
    // TODO remove @W-14447754 - add files filter
    autoCheckOpts.filesFilter = (autoCheckOpts.filesFilter ?? []).concat([
        'ui-help-components/modules/forceHelp/linkToReleaseNotes/__tests__/linkToReleaseNotes.spec.js',
        'ui-help-components/modules/forceHelp/linkToNonSalesforceResource/__tests__/linkToNonSalesforceResource.spec.js',
        'ui-help-components/modules/forceHelp/linkToAppexchange/__tests__/linkToAppexchange.spec.js',
        'ui-help-components/modules/forceHelp/linkToTrailblazer/__tests__/linkToTrailblazer.spec.js',
        'ui-help-components/modules/forceHelp/linkToVidyard/__tests__/linkToVidyard.spec.js',
        'ui-help-components/modules/forceHelp/linkToSalesforceDevelopers/__tests__/linkToSalesforceDevelopers.spec.js',
        'ui-help-components/modules/forceHelp/linkToWebinar/__tests__/linkToWebinar.spec.js',
        'ui-help-components/modules/forceHelp/linkToTrust/__tests__/linkToTrust.spec.js',
        'ui-help-components/modules/forceHelp/linkToPartnerCommunity/__tests__/linkToPartnerCommunity.spec.js',
        'ui-help-components/modules/forceHelp/linkToDocResource/__tests__/linkToDocResource.spec.js',
        'ui-help-components/modules/forceHelp/searchResultItem/__tests__/searchResultItem.spec.js',
        'ui-help-components/modules/forceHelp/linkToTrailhead/__tests__/linkToTrailhead.spec.js',
        'ui-help-components/modules/forceHelp/linkToSalesforceSuccess/__tests__/linkToSalesforceSuccess.spec.js',
        'ui-help-components/modules/forceHelp/linkToSalesforceHelp/__tests__/linkToSalesforceHelp.spec.js',
        'ui-help-components/modules/forceHelp/link/__tests__/link.spec.js',
        'ui-help-components/modules/forceHelp/searchResults/__tests__/searchResults.spec.js',
        'ui-help-components/modules/forceHelp/linkToKnownIssue/__tests__/linkToKnownIssue.spec.js',
    ]);
    // set the flag to true to run sa11y in DOM Mutation Observer mode
    autoCheckOpts.runDOMMutationObserver || (autoCheckOpts.runDOMMutationObserver = !!process.env.SA11Y_ENABLE_DOM_MUTATION_OBSERVER);
    autoCheckOpts.enableIncompleteResults || (autoCheckOpts.enableIncompleteResults = !!process.env.SA11Y_ENABLE_INCOMPLETE_RESULTS);
    (0, automatic_1.registerSa11yAutomaticChecks)(autoCheckOpts);
}
exports.setup = setup;
/**
 * Register accessibility helpers toBeAccessible as jest matchers
 */
function registerSa11yMatcher() {
    if (globals_1.expect !== undefined) {
        globals_1.expect.extend({ toBeAccessible: matcher_1.toBeAccessible });
    }
    else {
        throw new Error("Unable to find Jest's expect function." +
            '\nPlease check your Jest installation and that you have added @sa11y/jest correctly to your jest configuration.' +
            '\nSee https://github.com/salesforce/sa11y/tree/master/packages/jest#readme for help.');
    }
}
exports.registerSa11yMatcher = registerSa11yMatcher;
//# sourceMappingURL=setup.js.map