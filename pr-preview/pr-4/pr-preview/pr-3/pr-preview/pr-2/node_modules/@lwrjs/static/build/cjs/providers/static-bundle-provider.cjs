var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/static/src/providers/static-bundle-provider.ts
__markAsModule(exports);
__export(exports, {
  default: () => static_bundle_provider_default
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_path = __toModule(require("path"));
var import_fs_extra = __toModule(require("fs-extra"));
var import_static_utils = __toModule(require("../utils/static-utils.cjs"));
var StaticBundleProvider = class {
  constructor(_config, context) {
    this.name = "static-bundle-provider";
    if (!context.siteMetadata) {
      throw new Error(`[${this.name}] Site metadata was not found`);
    }
    this.siteBundles = context.siteMetadata.getSiteBundles();
    this.debugSiteBundles = context.siteMetadata.getDebugSiteBundles();
    this.siteRootDir = context.siteMetadata.getSiteRootDir();
    this.bundleConfig = context.config.bundleConfig;
    this.i18n = context.config.i18n;
  }
  async bundle(moduleId, runtimeEnvironment, runtimeParams) {
    const {specifier, name, namespace, version} = moduleId;
    const {
      debug,
      i18n: {defaultLocale}
    } = runtimeEnvironment;
    const localeId = runtimeParams?.locale || defaultLocale;
    const siteBundles = debug && this.debugSiteBundles ? this.debugSiteBundles : this.siteBundles;
    const metadata = await (0, import_static_utils.getLocalizedBundle)(specifier, siteBundles, localeId, this.i18n);
    if (!metadata) {
      return void 0;
    }
    const bundlePath = import_path.default.join(this.siteRootDir, metadata.path);
    const code = await this.getCode(bundlePath, debug, specifier, localeId);
    const imports = metadata.imports.map((specifier2) => {
      const importModule = (0, import_shared_utils.explodeSpecifier)(specifier2);
      if (!importModule.version) {
        importModule.version = (0, import_static_utils.resolveStaticBundleVersion)(this.siteBundles.bundles[specifier2]?.version);
      }
      return importModule;
    });
    const dynamicImports = metadata.dynamicImports?.map((specifier2) => {
      const dynamicImportModule = (0, import_shared_utils.explodeSpecifier)(specifier2);
      if (!dynamicImportModule.version) {
        dynamicImportModule.version = (0, import_static_utils.resolveStaticBundleVersion)(this.siteBundles.bundles[specifier2]?.version);
      }
      return dynamicImportModule;
    });
    const id = (0, import_shared_utils.getSpecifier)(moduleId);
    const exploded = (0, import_shared_utils.explodeSpecifier)(id);
    const resolvedName = name || exploded.name;
    const resolvedNamespace = namespace || exploded.namespace;
    const resolvedVersion = (0, import_static_utils.resolveStaticBundleVersion)(metadata.version, version);
    return {
      code,
      id: (0, import_shared_utils.getSpecifier)({
        specifier,
        version: resolvedVersion,
        name: resolvedName,
        namespace: resolvedNamespace
      }),
      name: resolvedName,
      namespace: resolvedNamespace,
      version: resolvedVersion,
      specifier,
      config: this.bundleConfig,
      bundleRecord: {
        includedModules: metadata.includedModules || [],
        imports,
        dynamicImports
      },
      src: bundlePath
    };
  }
  async getCode(bundlePath, debug, specifier, localeId) {
    const isLambda = process.env.AWS_LAMBDA_FUNCTION_NAME !== void 0;
    let bundleSourcePath = bundlePath;
    try {
      if (debug && isLambda) {
        const siteBundles = this.siteBundles;
        const metadata = await (0, import_static_utils.getLocalizedBundle)(specifier, siteBundles, localeId, this.i18n);
        if (!metadata) {
          import_diagnostics.logger.warn({
            label: "static-bundle-provider",
            message: `Unexpected code reference: ${specifier}`
          });
          return `throw new Error('Unexpected code reference: ${specifier}');`;
        }
        bundleSourcePath = import_path.default.join(this.siteRootDir, metadata.path);
      }
      return (await import_fs_extra.default.readFile(bundleSourcePath)).toString("utf-8");
    } catch (err) {
      import_diagnostics.logger.warn({
        label: "static-bundle-provider",
        message: `Unexpected code reference: ${specifier} ${bundleSourcePath}`
      }, err);
      return `throw new Error('Unexpected code reference: ${specifier} ${bundleSourcePath}');`;
    }
  }
};
var static_bundle_provider_default = StaticBundleProvider;
