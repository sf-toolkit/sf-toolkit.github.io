var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/tools/src/dedupe-bundles.ts
__markAsModule(exports);
__export(exports, {
  dedupeBundles: () => dedupeBundles
});
var import_fs_extra = __toModule(require("fs-extra"));
var import_path = __toModule(require("path"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var DEFAULT_KEY = "default";
async function dedupeBundles(siteRoot, i18n) {
  const bundleMetadataFilePath = import_path.default.join(siteRoot, "/.metadata/bundle-metadata.json");
  const siteBundles = await import_fs_extra.default.readJSON(bundleMetadataFilePath);
  import_diagnostics.logger.info({
    label: `dedupeBundles`,
    message: `Deduplicating ${Object.keys(siteBundles.bundles).length} bundles`
  });
  const groupedBundles = groupBundlesByLocales(siteBundles);
  import_diagnostics.logger.debug({
    label: `dedupeBundles`,
    message: `Found ${Object.keys(groupedBundles).length} grouped bundles`
  });
  const updatedBundleMetadata = {bundles: {}};
  const updatedBundles = updatedBundleMetadata.bundles;
  for (const specifier of Object.keys(groupedBundles)) {
    const variants = groupedBundles[specifier];
    const defaultVariant = variants[DEFAULT_KEY];
    if (defaultVariant) {
      updatedBundles[specifier] = defaultVariant;
      const defaultSource = String(import_fs_extra.default.readFileSync(import_path.default.join(siteRoot, defaultVariant.path)));
      for (const variantKey of Object.keys(variants)) {
        if (variantKey !== DEFAULT_KEY) {
          let dedupeSource = false;
          const variant = variants[variantKey];
          const variantSource = String(import_fs_extra.default.readFileSync(import_path.default.join(siteRoot, variant.path)));
          const localeId = extractLocale(variantKey);
          if (localeId) {
            dedupeSource = await (0, import_shared_utils.walkLocaleFallbacks)(localeId, i18n, async (curLocale) => {
              if (curLocale === localeId) {
                return false;
              }
              if (curLocale === i18n.defaultLocale) {
                return variantSource === defaultSource;
              }
              const curVariant = variants[`l/${curLocale}`];
              if (curVariant) {
                const curPath = import_path.default.join(siteRoot, curVariant.path);
                if (await import_fs_extra.default.pathExists(curPath)) {
                  const curVariantSource = String(import_fs_extra.default.readFileSync(curPath));
                  return variantSource === curVariantSource;
                }
              }
              return false;
            });
          }
          if (dedupeSource) {
            import_diagnostics.logger.debug({
              label: `dedupeBundles`,
              message: `Remove duplicate variant ${specifier}|${variantKey}`
            });
            import_fs_extra.default.removeSync(import_path.default.join(siteRoot, variant.path));
          } else {
            const variant2 = variants[variantKey];
            updatedBundles[`${specifier}|${variantKey}`] = variant2;
          }
        }
      }
    }
  }
  import_diagnostics.logger.info({
    label: `dedupeBundles`,
    message: `Deduplicated down to ${Object.keys(updatedBundleMetadata.bundles).length} bundles`
  });
  await import_fs_extra.default.writeJSON(bundleMetadataFilePath, updatedBundleMetadata, {spaces: 2});
  deleteEmptyFolders(siteRoot);
}
var LOCALE_PATTERN = /(?:^|\/)l\/([\w-_]+)/;
function extractLocale(variantKey) {
  const match = variantKey.match(LOCALE_PATTERN);
  if (match) {
    return match[1];
  }
  return void 0;
}
function groupBundlesByLocales(siteBundles) {
  const groupedBundles = {};
  for (const specifier of Object.keys(siteBundles.bundles)) {
    const parts = specifier.split("|");
    const firstPart = parts[0];
    const secondPart = parts.length > 1 ? parts[1] : DEFAULT_KEY;
    import_diagnostics.logger.debug({
      label: `dedupeBundles`,
      message: `${specifier} -> groupedBundles[${firstPart}][${secondPart}]`
    });
    if (!groupedBundles[firstPart]) {
      groupedBundles[firstPart] = {};
    }
    groupedBundles[firstPart][secondPart] = siteBundles.bundles[specifier];
  }
  return groupedBundles;
}
function deleteEmptyFolders(directory) {
  if (!import_fs_extra.default.existsSync(directory)) {
    import_diagnostics.logger.warn({label: `dedupeBundles`, message: `Directory does not exist: ${directory}`});
    return;
  }
  const files = import_fs_extra.default.readdirSync(directory);
  if (files.length === 0) {
    import_fs_extra.default.rmdirSync(directory);
    import_diagnostics.logger.debug({label: `dedupeBundles`, message: `Deleted empty folder: ${directory}`});
    return;
  }
  files.forEach((file) => {
    const filePath = import_path.default.join(directory, file);
    const isDirectory = import_fs_extra.default.statSync(filePath).isDirectory();
    if (isDirectory) {
      deleteEmptyFolders(filePath);
    }
  });
  const updatedFiles = import_fs_extra.default.readdirSync(directory);
  if (updatedFiles.length === 0) {
    import_fs_extra.default.rmdirSync(directory);
    import_diagnostics.logger.debug({label: `dedupeBundles`, message: `Deleted empty folder: ${directory}`});
  }
}
