import { Command } from 'commander';
import chalk from 'chalk';
import { logger } from '@lwrjs/diagnostics';
import { getSsrTimeoutOption, launch } from '../utils.js';
import path from 'path';
import fs from 'fs-extra';
export function createExperimentalMrtPackageCommand() {
    return new Command('experimental-mrt-package')
        .description('[experimental] Packages up local source into a pre-existing MRT bundle. INTERNAL ONLY - USE AT YOUR OWN RISK!')
        .option('--outputDir [path]', '[path] mrt bundle path', 'app')
        .option('--all', '[boolean] run command for every route in the config')
        .addOption(getSsrTimeoutOption())
        .action(async (options, cmd) => {
        const { port, open, logLevel, all, outputDir, timeout } = cmd.optsWithGlobals();
        process.env.LWR_LOG_LEVEL = logLevel; // Set the log level
        process.env.SSR_TIMEOUT = `${timeout}`;
        // TODO we will make this more robust in the future w/ full MRT HMR
        process.env.MRT_HMR = 'true';
        // Use server warmup to generate our views
        if (all)
            process.env.WARMUP = 'true';
        // runtimePort can be undefined on invocation. The actual value is resolved via createServer()
        let runtimePort = port;
        // Validate we have an ssr.js file in the app directory
        const ssrjs = path.join(process.cwd(), 'app', 'ssr.js');
        if (!fs.existsSync(ssrjs)) {
            logger.error('Could not find a valid ssr.js file. Please ensure you have an MRT bundle extracted locally in a directory named "app"');
            process.exit(1);
        }
        let server;
        try {
            const { createDevServer } = await import('../localdev/dev-server.js');
            server = await createDevServer(runtimePort, outputDir);
            await server.listen(async ({ serverMode, port: appPort }) => {
                runtimePort = appPort;
            });
            console.log(chalk.green(`Application is available at: http://localhost:${runtimePort}.`));
            console.log(chalk.yellow(`NOTE: Any routes you navigate to in your browser will be compiled from local source and packaged directly into MRT prod bundles. Use at your own risk!`));
            if (open) {
                await launch(runtimePort);
            }
        }
        catch (error) {
            logger.error(error);
            process.exit(1);
        }
    });
}
//# sourceMappingURL=mrt-package.js.map