var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/lwr/src/cli/localdev/dev-server.ts
__markAsModule(exports);
__export(exports, {
  createDevServer: () => createDevServer
});
var import_path = __toModule(require("path"));
var import_fs = __toModule(require("fs"));
var import_url = __toModule(require("url"));
var import_http_proxy_middleware = __toModule(require("http-proxy-middleware"));
var import_core = __toModule(require("@lwrjs/core"));
var import_express = __toModule(require("express"));
var import_config = __toModule(require("@lwrjs/config"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_meta = {};
async function createDevServer(port, bundleProdDir) {
  process.env.MRT_BUNDLE_ROOT = "app";
  process.env.LOCAL = "true";
  const {
    MRT_APP_CONFIG: {appConfig}
  } = await Promise.resolve().then(() => __toModule(require(import_path.default.join(process.cwd(), "app", "ssr.js"))));
  const staticSiteGenerator = {
    ...appConfig.staticSiteGenerator,
    outputDir: import_path.default.join("app", appConfig.staticSiteGenerator.outputDir)
  };
  if (bundleProdDir) {
    try {
      const aConfig = (0, import_config.loadConfig)({rootDir: process.cwd()});
      staticSiteGenerator._additionalRoutePaths = aConfig.appConfig?.staticSiteGenerator?._additionalRoutePaths || [];
    } catch (e) {
      import_diagnostics.logger.info("no additional route paths to load");
    }
  }
  const __dirname = import_path.default.dirname((0, import_url.fileURLToPath)(import_meta.url));
  let hooks = [import_path.default.join(__dirname, "hooks", "dev-context-hook.js")];
  let bundleProviders = [
    import_path.default.join(__dirname, "providers", "override-bundle-provider.js"),
    "@lwrjs/module-bundler/amd-bundle-provider"
  ];
  if (bundleProdDir) {
    hooks = [import_path.default.join(__dirname, "hooks", "package-context-hook.js")];
    bundleProviders = [
      [
        import_path.default.join(__dirname, "providers", "override-bundle-provider.js"),
        {writeProdBundlesDir: bundleProdDir}
      ],
      "@lwrjs/module-bundler/amd-bundle-provider"
    ];
  }
  const app = (0, import_core.createServer)({
    ...appConfig,
    ignoreLwrConfigFile: true,
    rootDir: process.cwd(),
    cacheDir: import_path.default.join(process.cwd(), "__lwr_cache__"),
    moduleProviders: [
      "@lwrjs/lwc-ssr/moduleProvider",
      import_path.default.join(__dirname, "providers", "alias-static-module-provider.js"),
      "@lwrjs/module-registry/externals-module-provider",
      import_path.default.join(__dirname, "providers", "evergreen-lwc-module-provider.js"),
      import_path.default.join(__dirname, "providers", "sfdx-module-provider.js"),
      import_path.default.join(__dirname, "providers", "fallthrough-module-provider.js")
    ],
    bundleProviders,
    assetProviders: ["@lwrjs/static/asset-provider"],
    assetTransformers: [],
    resourceProviders: ["@lwrjs/static/resource-provider"],
    uriTransformers: ["@lwrjs/lambda/mrt-static-uri-transformer"],
    hooks,
    staticSiteGenerator,
    port,
    routeHandlers: {},
    routes: []
  });
  const server = app.getInternalServer();
  server.use("/mobify/bundle/development/app/site/prod/view/en-US/", import_express.default.static(import_path.default.join(process.cwd(), "./__lwr_cache__/overrides")));
  server.use("/mobify/bundle/development/app/site/dev/view/en-US/", import_express.default.static(import_path.default.join(process.cwd(), "./__lwr_cache__/overrides")));
  server.use("/mobify/bundle/development/app/site", import_express.default.static(import_path.default.join(process.cwd(), "./app/site")));
  let proxyFile = import_path.default.join(process.cwd(), "./app/config/_proxy");
  if (!import_fs.default.existsSync(proxyFile))
    proxyFile = import_path.default.join(process.cwd(), "./config/_proxy");
  if (import_fs.default.existsSync(proxyFile)) {
    const proxyConfig = import_fs.default.readFileSync(proxyFile).toString().trim().split("\n");
    for (const entry of proxyConfig) {
      const [entryPath, target] = entry.split(" ");
      const pathRewrite = entryPath.indexOf("/mobify/proxy") === 0 || entryPath.indexOf("/mobify/caching") === 0 ? {[entryPath]: ""} : void 0;
      server.use(entryPath, (0, import_http_proxy_middleware.default)({
        target,
        pathRewrite,
        followRedirects: false,
        changeOrigin: true
      }));
    }
  }
  return app;
}
