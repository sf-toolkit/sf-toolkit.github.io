var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/utils/ssr-debug.ts
__markAsModule(exports);
__export(exports, {
  default: () => runCode
});
var import_path = __toModule(require("path"));
var import_fs_extra = __toModule(require("fs-extra"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_utils = __toModule(require("./utils.cjs"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var SSR_DIR_NAME = "ssr";
function getSSRCodeFolder(cacheDir) {
  const ssrCodeFolder = import_path.default.join(cacheDir, SSR_DIR_NAME, (0, import_shared_utils.stringToVariableName)(new Date().toISOString()));
  if (!import_fs_extra.default.existsSync(ssrCodeFolder)) {
    import_fs_extra.default.mkdirSync(ssrCodeFolder, {recursive: true});
  }
  return ssrCodeFolder;
}
function getFilePath(specifier, directory) {
  const fileToken = specifier.length > 100 ? (0, import_shared_utils.hashContent)(specifier) : specifier;
  return import_path.default.join(getSSRCodeFolder(directory), (0, import_shared_utils.stringToVariableName)(`${fileToken}_${Date.now()}`) + ".cjs");
}
function runCode(codes, context, options) {
  const {bundleSpecifier, cacheDir} = options;
  return new Promise((resolve, reject) => {
    try {
      const filePath = getFilePath(bundleSpecifier, cacheDir);
      const tracer = (0, import_instrumentation.getTracer)();
      globalThis.trace = tracer.trace.bind(tracer);
      globalThis.resolver = (results) => {
        results.filePath = filePath;
        resolve(results);
      };
      const CONTEXT_CODE = `const { webcrypto: crypto } = require('crypto');
globalThis.stringifyError=(e)=>(typeof e=='string'||e instanceof String)?e:require('util').inspect(e);
if (!globalThis.trace) {
    ${import_utils.TRACER};
}
// just console log if running as script
if (!globalThis.resolver) {
    globalThis.resolver = (results) => {
        console.log(results)
    };
}
globalThis.getContext = () => ({ ...${JSON.stringify(context)}, host: '${options.host}' });
const workerData = { host: '${options.host}', requestDepth: ${options.requestDepth}};
${import_utils.FETCH_ENDOWMENT}`;
      const sandboxCode = [
        `// ssr code for ${bundleSpecifier}`,
        `debugger;`,
        CONTEXT_CODE,
        ...codes
      ].join("\n");
      import_fs_extra.default.writeFileSync(filePath, sandboxCode);
      import_diagnostics.logger.info({
        label: "ssr-gen",
        message: filePath
      });
      Promise.resolve().then(() => __toModule(require(filePath))).catch(reject);
    } catch (err) {
      reject(err);
    }
  });
}
