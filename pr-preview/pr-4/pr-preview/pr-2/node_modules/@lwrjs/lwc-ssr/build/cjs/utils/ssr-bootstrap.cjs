var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/utils/ssr-bootstrap.ts
__markAsModule(exports);
__export(exports, {
  runServerBootstrap: () => runServerBootstrap
});
var import_amd_utils = __toModule(require("./amd-utils.cjs"));
var import_identity = __toModule(require("../identity.cjs"));
var import_sandbox = __toModule(require("./sandbox.cjs"));
var import_perf_hooks = __toModule(require("perf_hooks"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var EMIT_WIRES = `globalThis.lwcRuntimeFlags = { ENABLE_WIRE_SYNC_EMIT: true };`;
async function runServerBootstrap({
  specifier,
  props: templateProps,
  serverData = {}
}, moduleBundler, resourceRegistry, routes, ssrContext) {
  const {config, runtimeEnvironment, runtimeParams} = ssrContext;
  const {format} = runtimeEnvironment;
  const {
    bundleRecord,
    code,
    specifier: bundleSpecifier,
    version
  } = await getServerBundleSource(specifier, runtimeEnvironment, runtimeParams, moduleBundler, routes);
  const context = {
    props: templateProps,
    url: runtimeParams.url,
    params: runtimeParams.params || {},
    query: runtimeParams.query || {},
    locale: runtimeParams.locale || runtimeEnvironment.i18n.defaultLocale,
    basePath: runtimeParams.basePath || runtimeEnvironment.basePath
  };
  const environment = {
    SSR: true,
    ...(0, import_shared_utils.buildEnvironmentContext)(runtimeParams)
  };
  const environmentCode = `globalThis.LWR = {...globalThis.LWR, env: ${JSON.stringify(environment)}};`;
  const host = runtimeParams.host;
  const requestDepth = runtimeParams.requestDepth;
  const options = {
    cacheDir: config.cacheDir,
    bundleSpecifier,
    host,
    requestDepth
  };
  const startTime = import_perf_hooks.performance.now();
  return (0, import_instrumentation.getTracer)().trace({
    name: import_instrumentation.ViewSpan.ServerSideRender,
    attributes: {specifier: bundleSpecifier}
  }, async () => {
    try {
      const {results, errors} = format === "amd" ? await (0, import_sandbox.default)([
        EMIT_WIRES,
        environmentCode,
        ...await (0, import_amd_utils.getCode)(runtimeEnvironment, serverData, version.replace(/\./g, "_"), bundleSpecifier, bundleRecord.includedModules, resourceRegistry),
        code
      ], context, options) : await (0, import_sandbox.default)([EMIT_WIRES, environmentCode, code], context, options);
      const endTime = import_perf_hooks.performance.now();
      const timeDiff = endTime - startTime;
      import_diagnostics.logger.info({
        label: `Server-side Rendering`,
        message: `${specifier} in ${Math.round(timeDiff)} ms`
      });
      return {results, errors: errors && Object.keys(errors).length > 0 ? errors : void 0};
    } catch (e) {
      const info = (0, import_identity.parseBootstrapSpecifier)(specifier, routes);
      return {errors: {[info ? info.rootSpecifiers.join(",") : specifier]: e}};
    }
  });
}
async function getServerBundleSource(specifier, runtimeEnvironment, runtimeParams, moduleBundler, routes) {
  return (0, import_instrumentation.getTracer)().trace({
    name: import_instrumentation.ViewSpan.ServerBundle,
    attributes: {
      specifier,
      ssrStaticBundles: `${runtimeEnvironment.featureFlags?.SSR_STATIC_BUNDLES || "false"}`
    }
  }, async () => {
    const {format} = runtimeEnvironment;
    const def = format === "esm" ? await moduleBundler.getModuleBundle({specifier}, {...runtimeEnvironment, bundle: false}, runtimeParams, {
      exclude: [],
      alias: {
        lwc: "@lwc/engine-server"
      }
    }) : await (0, import_amd_utils.getBundle)(specifier, moduleBundler, routes, runtimeEnvironment, runtimeParams);
    return def;
  });
}
