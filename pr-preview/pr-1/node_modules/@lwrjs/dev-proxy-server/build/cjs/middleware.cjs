var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/dev-proxy-server/src/middleware.ts
__markAsModule(exports);
__export(exports, {
  addLocalProxyMiddleware: () => addLocalProxyMiddleware,
  addRemoteProxyMiddleware: () => addRemoteProxyMiddleware
});
var import_http_proxy_middleware = __toModule(require("http-proxy-middleware"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var HOST = "host";
var ProxyLogLevels;
(function(ProxyLogLevels2) {
  ProxyLogLevels2["Debug"] = "debug";
  ProxyLogLevels2["Info"] = "info";
  ProxyLogLevels2["Warn"] = "warn";
  ProxyLogLevels2["Error"] = "error";
  ProxyLogLevels2["Silent"] = "silent";
})(ProxyLogLevels || (ProxyLogLevels = {}));
function addLocalProxyMiddleware(app, defaultHost) {
  const domainAndPort = defaultHost.replace(/^([a-z][a-z0-9+\-.]*):\/\//, "");
  app.use("/", (0, import_http_proxy_middleware.default)({
    target: defaultHost,
    changeOrigin: true,
    onProxyReq: (proxyRequest, incomingRequest) => {
      const forwarded = incomingRequest.headers.forwarded;
      const hostHeader = incomingRequest.headers.host;
      const hostProto = incomingRequest.protocol;
      if (hostHeader !== domainAndPort) {
        proxyRequest.setHeader(HOST, domainAndPort);
        proxyRequest.setHeader("Forwarded", forwarded ? forwarded : `host=${hostHeader};proto=${hostProto}`);
      }
    }
  }));
}
function addRemoteProxyMiddleware(app, proxyConfig) {
  const {proxyConfigs} = proxyConfig;
  for (const entry of proxyConfigs) {
    const [path, target] = entry;
    const targetHost = target.replace(/^([a-z][a-z0-9+\-.]*):\/\//, "");
    app.use(path, (0, import_http_proxy_middleware.default)({
      target,
      logLevel: resolveLogLevel(import_diagnostics.logger.getLogLevel()),
      logProvider: () => {
        return import_diagnostics.logger;
      },
      followRedirects: false,
      changeOrigin: true,
      onProxyReq: (proxyRequest, incomingRequest) => {
        const hostHeader = incomingRequest.headers.host;
        if (hostHeader !== target) {
          proxyRequest.setHeader(HOST, targetHost);
        }
        proxyRequest.setHeader("Forwarded", `host=${hostHeader}`);
      }
    }));
  }
}
function resolveLogLevel(currentLevel) {
  if (import_diagnostics.logger.isDebugEnabled())
    return ProxyLogLevels.Debug;
  if (import_diagnostics.logger.isInfoEnabled())
    return ProxyLogLevels.Info;
  if (import_diagnostics.logger.isWarnEnabled())
    return ProxyLogLevels.Warn;
  if (import_diagnostics.logger.isErrorEnabled())
    return ProxyLogLevels.Error;
  return ProxyLogLevels.Silent;
}
