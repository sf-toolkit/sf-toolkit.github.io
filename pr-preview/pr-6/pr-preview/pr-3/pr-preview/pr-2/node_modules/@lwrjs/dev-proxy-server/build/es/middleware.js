import proxy from 'http-proxy-middleware';
import { logger } from '@lwrjs/diagnostics';
// Header constants
const HOST = 'host';
// Log levels enumeration
var ProxyLogLevels;
(function (ProxyLogLevels) {
    ProxyLogLevels["Debug"] = "debug";
    ProxyLogLevels["Info"] = "info";
    ProxyLogLevels["Warn"] = "warn";
    ProxyLogLevels["Error"] = "error";
    ProxyLogLevels["Silent"] = "silent";
})(ProxyLogLevels || (ProxyLogLevels = {}));
/**
 * The Proxy middleware responsible for proxying all other requests not configured to external systems.
 * @param app
 * @param defaultHost
 */
export function addLocalProxyMiddleware(app, defaultHost) {
    const domainAndPort = defaultHost.replace(/^([a-z][a-z0-9+\-.]*):\/\//, '');
    app.use('/', proxy({
        target: defaultHost,
        changeOrigin: true,
        onProxyReq: (proxyRequest, incomingRequest) => {
            // If a forwarded header is passed it should take precedence
            const forwarded = incomingRequest.headers.forwarded;
            // Host: <host>:<port>
            const hostHeader = incomingRequest.headers.host;
            const hostProto = incomingRequest.protocol;
            if (hostHeader !== domainAndPort) {
                proxyRequest.setHeader(HOST, domainAndPort);
                // Add Forwarded header per https://git.soma.salesforce.com/pages/benjamin-fry/lwr-on-mrt-designs/request_path.html
                proxyRequest.setHeader('Forwarded', forwarded ? forwarded : `host=${hostHeader};proto=${hostProto}`);
            }
        },
    }));
}
/**
 * The Proxy middleware responsible for proxying requests to a configured remote origin.
 * @param app
 * @param proxyConfig
 */
export function addRemoteProxyMiddleware(app, proxyConfig) {
    const { proxyConfigs } = proxyConfig;
    for (const entry of proxyConfigs) {
        const [path, target] = entry;
        // remove the scheme from the proxyConfig host.
        const targetHost = target.replace(/^([a-z][a-z0-9+\-.]*):\/\//, '');
        app.use(path, proxy({
            target,
            logLevel: resolveLogLevel(logger.getLogLevel()),
            logProvider: () => {
                return logger;
            },
            followRedirects: false,
            changeOrigin: true,
            onProxyReq: (proxyRequest, incomingRequest) => {
                // Fix up any Host header. We ignore any current value and
                // always replace it with the target host.
                // Host: <host>:<port>
                const hostHeader = incomingRequest.headers.host;
                if (hostHeader !== target) {
                    proxyRequest.setHeader(HOST, targetHost);
                }
                // Add Forwarded header per https://git.soma.salesforce.com/pages/benjamin-fry/lwr-on-mrt-designs/request_path.html
                proxyRequest.setHeader('Forwarded', `host=${hostHeader}`);
            },
        }));
    }
}
function resolveLogLevel(currentLevel) {
    // uplift VERBOSE to DEBUG; otherwise using runtime loglevel;
    if (logger.isDebugEnabled())
        return ProxyLogLevels.Debug;
    if (logger.isInfoEnabled())
        return ProxyLogLevels.Info;
    if (logger.isWarnEnabled())
        return ProxyLogLevels.Warn;
    if (logger.isErrorEnabled())
        return ProxyLogLevels.Error;
    // default log level
    return ProxyLogLevels.Silent;
}
//# sourceMappingURL=middleware.js.map