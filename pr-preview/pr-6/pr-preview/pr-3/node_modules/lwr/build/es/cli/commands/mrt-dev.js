import { Command } from 'commander';
import chalk from 'chalk';
import { logger } from '@lwrjs/diagnostics';
import { getPortOption, getSandboxOption, getSsrTimeoutOption, launch } from '../utils.js';
import path from 'path';
import fs from 'fs-extra';
export function createExperimentalMrtDevCommand() {
    return new Command('experimental-mrt-dev')
        .description('[experimental] local development with HMR for an MRT bundle')
        .addOption(getPortOption())
        .addOption(getSandboxOption())
        .addOption(getSsrTimeoutOption())
        .option('-o, --open', `[boolean] open browser on startup`, false)
        .action(async (options, cmd) => {
        const { port, open, logLevel, sandbox, timeout } = cmd.optsWithGlobals();
        if (!sandbox)
            process.env.SSR_DEBUG = 'true'; // Always have SSR_DEBUG enabled unless user specifically wants to render in sandbox
        process.env.LWR_LOG_LEVEL = logLevel; // Set the log level
        process.env.SSR_TIMEOUT = `${timeout}`;
        process.env.MRT_HMR = 'true';
        // runtimePort can be undefined on invocation. The actual value is resolved via createServer()
        let runtimePort = port;
        // Validate we have an ssr.js file in the app directory
        const ssrjs = path.join(process.cwd(), 'app', 'ssr.js');
        if (!fs.existsSync(ssrjs)) {
            logger.error('Could not find a valid ssr.js file. Please ensure you have an MRT bundle extracted locally in a directory named "app"');
            process.exit(1);
        }
        let server;
        try {
            const { createDevServer } = await import('../localdev/dev-server.js');
            server = await createDevServer(runtimePort);
            await server.listen(async ({ serverMode, port: appPort }) => {
                runtimePort = appPort;
            });
            console.log(chalk.green(`Application is available at: http://localhost:${runtimePort}`));
            if (open) {
                await launch(runtimePort);
            }
        }
        catch (error) {
            logger.error(error);
            process.exit(1);
        }
    });
}
//# sourceMappingURL=mrt-dev.js.map