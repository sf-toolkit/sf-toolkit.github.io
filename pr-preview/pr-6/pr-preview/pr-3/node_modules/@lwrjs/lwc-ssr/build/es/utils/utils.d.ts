import { TraceFn } from '@lwrjs/instrumentation';
export declare function getWatchdogTime(): number;
export declare function startWatchdogTimer(callback: Function, time: number): number;
export declare function stopWatchdogTimer(timerId: number): void;
export type FetchFunction = (request: string | URL | globalThis.Request, init?: RequestInit) => Promise<Response>;
export declare class FetchController {
    private killSwitchActivated;
    private controllers;
    private fetchEndowment;
    constructor(fetchEndowment: FetchFunction);
    controlledFetch: FetchFunction;
    activateKillSwitch: () => void;
    private handleAbortError;
}
export declare function createFetchEndowment(trace: TraceFn<Response>, host?: string, requestCount?: number): FetchFunction;
export declare const FETCH_ENDOWMENT: string;
export declare const TRACER = "globalThis.trace = (id, fn) => fn()";
export declare function createSsrErrorMessage(specifier: string, e: any): string;
//# sourceMappingURL=utils.d.ts.map