var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/core/src/middleware/request-processor-middleware.ts
__markAsModule(exports);
__export(exports, {
  requestProcessorMiddleware: () => requestProcessorMiddleware
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var MRT_REQUEST_CLASS = "X-Mobify-Request-Class";
var MRT_REQUEST_CLASS_KEY = MRT_REQUEST_CLASS.toLowerCase();
function requestProcessorMiddleware(app, context) {
  const {basePath} = context.runtimeEnvironment;
  app.use(async (req, res, next) => {
    let requestClass;
    let requestDepth;
    if (req.headers) {
      if (import_diagnostics.logger.isDebugEnabled()) {
        import_diagnostics.logger.debug({
          label: `request-processor-middleware`,
          message: `Request: ${req.originalUrl}`
        });
        for (const headerName in req.headers) {
          import_diagnostics.logger.debug({
            label: `request-processor-middleware`,
            message: `Header ${headerName}: ${req.headers[headerName]}`
          });
        }
      }
      requestClass = req.headers[MRT_REQUEST_CLASS_KEY];
      requestDepth = (0, import_shared_utils.parseRequestDepthHeader)(req.headers);
    }
    if (requestDepth && requestDepth > 0) {
      import_diagnostics.logger.error({
        label: "request-processor-middleware",
        message: `Lambda SSR request cycle detected: ${req.originalUrl}`
      });
      return res.status(400).send("Request depth limit reached");
    }
    if (req.headers && typeof requestClass === "string") {
      const parsedRequestClass = parseRequestClass(requestClass);
      import_diagnostics.logger.debug({
        label: `request-processor-middleware`,
        message: `parsedRequestClass?.basePath: ${parsedRequestClass?.basePath}`
      });
      const pathValue = parsedRequestClass?.basePath || basePath || "";
      req.basePath = pathValue === "" || pathValue.indexOf("/") === 0 ? pathValue : `/${pathValue}`;
    } else {
      import_diagnostics.logger.debug({
        label: `request-processor-middleware`,
        message: `${MRT_REQUEST_CLASS_KEY} ignored ${req.headers ? req.headers[MRT_REQUEST_CLASS_KEY] : "no-headers"}`
      });
      req.basePath = basePath;
    }
    await next();
  });
}
function parseRequestClass(requestClass) {
  const keyValuePairs = requestClass.split(";");
  const parsed = {};
  for (const pair of keyValuePairs) {
    const [key, value] = pair.split("=");
    parsed[key] = value;
  }
  return parsed;
}
