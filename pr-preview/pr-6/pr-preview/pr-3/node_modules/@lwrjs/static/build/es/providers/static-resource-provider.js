import { logger } from '@lwrjs/diagnostics';
import { mimeLookup } from '@lwrjs/shared-utils';
import path from 'path';
import fs from 'fs-extra';
export default class StaticResourceProvider {
    constructor(_config, context) {
        this.name = 'static-resource-provider';
        if (!context.siteMetadata) {
            throw new Error(`[${this.name}] Site metadata was not found`);
        }
        this.resourceRegistry = context.resourceRegistry;
        this.siteResources = context.siteMetadata.getSiteResources();
        this.debugSiteResources = context.siteMetadata.getDebugSiteResources();
        this.siteRootDir = context.siteMetadata.getSiteRootDir();
    }
    async getResource(resourceIdentity, runtimeEnvironment) {
        const { debug } = runtimeEnvironment;
        const metadata = this.siteResources.resources[resourceIdentity.specifier];
        const debugMetadata = this.debugSiteResources
            ? this.debugSiteResources.resources[resourceIdentity.specifier]
            : undefined;
        if (!metadata && !debugMetadata) {
            logger.warn({
                label: `${this.name}`,
                message: `Did not find requested specifier ${resourceIdentity.specifier}`,
            });
            return undefined;
        }
        const resourcePath = path.join(this.siteRootDir, metadata.path);
        const debugResourcePath = debugMetadata ? path.join(this.siteRootDir, debugMetadata.path) : undefined;
        const isLambda = process.env.AWS_LAMBDA_FUNCTION_NAME !== undefined;
        const useDebug = debug && !isLambda && debugResourcePath;
        // Figure out mime type
        const type = metadata.mimeType || mimeLookup(resourcePath) || 'application/javascript';
        return {
            type,
            // Have to make the loader shim code available for SSR
            stream: () => {
                logger.debug({
                    label: `${this.name}`,
                    message: `Resource read from lambda ${resourceIdentity.specifier}`,
                });
                if (useDebug) {
                    // use the debug resource if:
                    // - debug mode is ON
                    // - isLambda is false
                    // - the debug version of the resource exists
                    return fs.createReadStream(debugResourcePath);
                }
                else {
                    return fs.createReadStream(resourcePath);
                }
            },
            src: useDebug ? debugResourcePath : resourcePath,
            inline: metadata.inline,
        };
    }
}
//# sourceMappingURL=static-resource-provider.js.map