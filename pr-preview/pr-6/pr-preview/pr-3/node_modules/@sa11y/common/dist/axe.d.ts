import * as axe from 'axe-core';
import { resultGroups, RuleMetadata } from 'axe-core';
export declare const axeRuntimeExceptionMsgPrefix = "Error running accessibility checks using axe:";
export declare const axeVersion: string | undefined;
export type AxeResults = axe.Result[] | axeIncompleteResults[];
/**
 * Interface that represents a function that runs axe and returns violations
 */
interface AxeRunner {
    (): Promise<AxeResults>;
}
export interface axeIncompleteResults extends axe.Result {
    message?: string;
}
/**
 * A11yConfig defines options to run accessibility checks using axe specifying list of rules to test
 */
export interface A11yConfig extends axe.RunOptions {
    runOnly: {
        type: 'rule';
        values: string[];
    };
    resultTypes: resultGroups[];
}
/**
 * Get results by running axe with given function
 * @param axeRunner - function satisfying AxeRunner interface
 */
export declare function getA11yResults(axeRunner: AxeRunner): Promise<AxeResults>;
/**
 * Get incomplete by running axe with given function
 * @param axeRunner - function satisfying AxeRunner interface
 */
export declare function getIncomplete(axeRunner: AxeRunner): Promise<AxeResults>;
/**
 * Get violations by running axe with given function
 * @param axeRunner - function satisfying AxeRunner interface
 */
export declare function getViolations(axeRunner: AxeRunner): Promise<AxeResults>;
/**
 * Return list of axe rules as a map of rule id to corresponding metadata
 */
export declare function getAxeRules(): Map<string, RuleMetadata>;
export {};
//# sourceMappingURL=axe.d.ts.map