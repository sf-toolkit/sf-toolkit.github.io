/// <reference types="lwc" />
import type { ContextualWireAdapter, LwcContextualizer } from 'lwr/contextUtils';
export declare const currentPageReferenceContextualizer: import("lwc").Contextualizer<import("lwr/routerUtils").PageReference>;
export declare const currentViewContextualizer: import("lwc").Contextualizer<{
    viewset: import("lwr/routerUtils").ViewSet;
    onComplete?: Function | undefined;
}> | undefined;
export declare const navigationContextContextualizer: import("lwc").Contextualizer<import("lwr/navigation").ContextId>;
/**
 *
 * @param {TContext} contextValue - Context API object
 * @param {EventTarget} providerNode - Context DOM element
 * @param {Contextualizer} contextualizer - Function for providing this context to subtree nodes wired to a specific adapter
 * @param {ContextualWireAdapter<TContext, TEmit, TConfig>} contextualAdapter - Contextual wire adapter capable of subscribing to context changes
 */
export declare function provideContext<TContext, TEmit, TConfig>(contextValue: TContext, providerNode: EventTarget, contextualizer?: LwcContextualizer, contextualAdapter?: ContextualWireAdapter<TContext, TEmit, TConfig>): void;
//# sourceMappingURL=contextProvider.d.ts.map